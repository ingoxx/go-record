// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v5.28.2
// source: streamrpc.proto

package streamrpc

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	MyService_MyMethod_FullMethodName = "/streamrpc.MyService/MyMethod"
)

// MyServiceClient is the client API for MyService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
//
// 流式1
type MyServiceClient interface {
	MyMethod(ctx context.Context, opts ...grpc.CallOption) (grpc.BidiStreamingClient[MyMessage, MyMessage], error)
}

type myServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewMyServiceClient(cc grpc.ClientConnInterface) MyServiceClient {
	return &myServiceClient{cc}
}

func (c *myServiceClient) MyMethod(ctx context.Context, opts ...grpc.CallOption) (grpc.BidiStreamingClient[MyMessage, MyMessage], error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &MyService_ServiceDesc.Streams[0], MyService_MyMethod_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &grpc.GenericClientStream[MyMessage, MyMessage]{ClientStream: stream}
	return x, nil
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type MyService_MyMethodClient = grpc.BidiStreamingClient[MyMessage, MyMessage]

// MyServiceServer is the server API for MyService service.
// All implementations must embed UnimplementedMyServiceServer
// for forward compatibility.
//
// 流式1
type MyServiceServer interface {
	MyMethod(grpc.BidiStreamingServer[MyMessage, MyMessage]) error
	mustEmbedUnimplementedMyServiceServer()
}

// UnimplementedMyServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedMyServiceServer struct{}

func (UnimplementedMyServiceServer) MyMethod(grpc.BidiStreamingServer[MyMessage, MyMessage]) error {
	return status.Errorf(codes.Unimplemented, "method MyMethod not implemented")
}
func (UnimplementedMyServiceServer) mustEmbedUnimplementedMyServiceServer() {}
func (UnimplementedMyServiceServer) testEmbeddedByValue()                   {}

// UnsafeMyServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to MyServiceServer will
// result in compilation errors.
type UnsafeMyServiceServer interface {
	mustEmbedUnimplementedMyServiceServer()
}

func RegisterMyServiceServer(s grpc.ServiceRegistrar, srv MyServiceServer) {
	// If the following call pancis, it indicates UnimplementedMyServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&MyService_ServiceDesc, srv)
}

func _MyService_MyMethod_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(MyServiceServer).MyMethod(&grpc.GenericServerStream[MyMessage, MyMessage]{ServerStream: stream})
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type MyService_MyMethodServer = grpc.BidiStreamingServer[MyMessage, MyMessage]

// MyService_ServiceDesc is the grpc.ServiceDesc for MyService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var MyService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "streamrpc.MyService",
	HandlerType: (*MyServiceServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "MyMethod",
			Handler:       _MyService_MyMethod_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
	},
	Metadata: "streamrpc.proto",
}

const (
	StreamRpcFileService_SendFile_FullMethodName = "/streamrpc.StreamRpcFileService/SendFile"
)

// StreamRpcFileServiceClient is the client API for StreamRpcFileService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
//
// 流式2
type StreamRpcFileServiceClient interface {
	SendFile(ctx context.Context, in *StreamFileRequest, opts ...grpc.CallOption) (grpc.ServerStreamingClient[StreamFileReply], error)
}

type streamRpcFileServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewStreamRpcFileServiceClient(cc grpc.ClientConnInterface) StreamRpcFileServiceClient {
	return &streamRpcFileServiceClient{cc}
}

func (c *streamRpcFileServiceClient) SendFile(ctx context.Context, in *StreamFileRequest, opts ...grpc.CallOption) (grpc.ServerStreamingClient[StreamFileReply], error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &StreamRpcFileService_ServiceDesc.Streams[0], StreamRpcFileService_SendFile_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &grpc.GenericClientStream[StreamFileRequest, StreamFileReply]{ClientStream: stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type StreamRpcFileService_SendFileClient = grpc.ServerStreamingClient[StreamFileReply]

// StreamRpcFileServiceServer is the server API for StreamRpcFileService service.
// All implementations must embed UnimplementedStreamRpcFileServiceServer
// for forward compatibility.
//
// 流式2
type StreamRpcFileServiceServer interface {
	SendFile(*StreamFileRequest, grpc.ServerStreamingServer[StreamFileReply]) error
	mustEmbedUnimplementedStreamRpcFileServiceServer()
}

// UnimplementedStreamRpcFileServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedStreamRpcFileServiceServer struct{}

func (UnimplementedStreamRpcFileServiceServer) SendFile(*StreamFileRequest, grpc.ServerStreamingServer[StreamFileReply]) error {
	return status.Errorf(codes.Unimplemented, "method SendFile not implemented")
}
func (UnimplementedStreamRpcFileServiceServer) mustEmbedUnimplementedStreamRpcFileServiceServer() {}
func (UnimplementedStreamRpcFileServiceServer) testEmbeddedByValue()                              {}

// UnsafeStreamRpcFileServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to StreamRpcFileServiceServer will
// result in compilation errors.
type UnsafeStreamRpcFileServiceServer interface {
	mustEmbedUnimplementedStreamRpcFileServiceServer()
}

func RegisterStreamRpcFileServiceServer(s grpc.ServiceRegistrar, srv StreamRpcFileServiceServer) {
	// If the following call pancis, it indicates UnimplementedStreamRpcFileServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&StreamRpcFileService_ServiceDesc, srv)
}

func _StreamRpcFileService_SendFile_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(StreamFileRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(StreamRpcFileServiceServer).SendFile(m, &grpc.GenericServerStream[StreamFileRequest, StreamFileReply]{ServerStream: stream})
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type StreamRpcFileService_SendFileServer = grpc.ServerStreamingServer[StreamFileReply]

// StreamRpcFileService_ServiceDesc is the grpc.ServiceDesc for StreamRpcFileService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var StreamRpcFileService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "streamrpc.StreamRpcFileService",
	HandlerType: (*StreamRpcFileServiceServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "SendFile",
			Handler:       _StreamRpcFileService_SendFile_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "streamrpc.proto",
}

const (
	StreamRpcService_SayHelloWorld_FullMethodName = "/streamrpc.StreamRpcService/SayHelloWorld"
)

// StreamRpcServiceClient is the client API for StreamRpcService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
//
// 流式3
type StreamRpcServiceClient interface {
	SayHelloWorld(ctx context.Context, in *StreamRequest, opts ...grpc.CallOption) (grpc.ServerStreamingClient[StreamReply], error)
}

type streamRpcServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewStreamRpcServiceClient(cc grpc.ClientConnInterface) StreamRpcServiceClient {
	return &streamRpcServiceClient{cc}
}

func (c *streamRpcServiceClient) SayHelloWorld(ctx context.Context, in *StreamRequest, opts ...grpc.CallOption) (grpc.ServerStreamingClient[StreamReply], error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &StreamRpcService_ServiceDesc.Streams[0], StreamRpcService_SayHelloWorld_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &grpc.GenericClientStream[StreamRequest, StreamReply]{ClientStream: stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type StreamRpcService_SayHelloWorldClient = grpc.ServerStreamingClient[StreamReply]

// StreamRpcServiceServer is the server API for StreamRpcService service.
// All implementations must embed UnimplementedStreamRpcServiceServer
// for forward compatibility.
//
// 流式3
type StreamRpcServiceServer interface {
	SayHelloWorld(*StreamRequest, grpc.ServerStreamingServer[StreamReply]) error
	mustEmbedUnimplementedStreamRpcServiceServer()
}

// UnimplementedStreamRpcServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedStreamRpcServiceServer struct{}

func (UnimplementedStreamRpcServiceServer) SayHelloWorld(*StreamRequest, grpc.ServerStreamingServer[StreamReply]) error {
	return status.Errorf(codes.Unimplemented, "method SayHelloWorld not implemented")
}
func (UnimplementedStreamRpcServiceServer) mustEmbedUnimplementedStreamRpcServiceServer() {}
func (UnimplementedStreamRpcServiceServer) testEmbeddedByValue()                          {}

// UnsafeStreamRpcServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to StreamRpcServiceServer will
// result in compilation errors.
type UnsafeStreamRpcServiceServer interface {
	mustEmbedUnimplementedStreamRpcServiceServer()
}

func RegisterStreamRpcServiceServer(s grpc.ServiceRegistrar, srv StreamRpcServiceServer) {
	// If the following call pancis, it indicates UnimplementedStreamRpcServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&StreamRpcService_ServiceDesc, srv)
}

func _StreamRpcService_SayHelloWorld_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(StreamRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(StreamRpcServiceServer).SayHelloWorld(m, &grpc.GenericServerStream[StreamRequest, StreamReply]{ServerStream: stream})
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type StreamRpcService_SayHelloWorldServer = grpc.ServerStreamingServer[StreamReply]

// StreamRpcService_ServiceDesc is the grpc.ServiceDesc for StreamRpcService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var StreamRpcService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "streamrpc.StreamRpcService",
	HandlerType: (*StreamRpcServiceServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "SayHelloWorld",
			Handler:       _StreamRpcService_SayHelloWorld_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "streamrpc.proto",
}
