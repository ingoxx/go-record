// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.18.1
// source: command.proto

package command

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// UpdateProcessClient is the client API for UpdateProcess service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type UpdateProcessClient interface {
	DockerUpdate(ctx context.Context, in *CmdRequest, opts ...grpc.CallOption) (*CmdReply, error)
	JavaUpdate(ctx context.Context, in *CmdRequest, opts ...grpc.CallOption) (*CmdReply, error)
	DockerReload(ctx context.Context, in *CmdRequest, opts ...grpc.CallOption) (*CmdReply, error)
	JavaReload(ctx context.Context, in *CmdRequest, opts ...grpc.CallOption) (*CmdReply, error)
}

type updateProcessClient struct {
	cc grpc.ClientConnInterface
}

func NewUpdateProcessClient(cc grpc.ClientConnInterface) UpdateProcessClient {
	return &updateProcessClient{cc}
}

func (c *updateProcessClient) DockerUpdate(ctx context.Context, in *CmdRequest, opts ...grpc.CallOption) (*CmdReply, error) {
	out := new(CmdReply)
	err := c.cc.Invoke(ctx, "/command.UpdateProcess/DockerUpdate", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *updateProcessClient) JavaUpdate(ctx context.Context, in *CmdRequest, opts ...grpc.CallOption) (*CmdReply, error) {
	out := new(CmdReply)
	err := c.cc.Invoke(ctx, "/command.UpdateProcess/JavaUpdate", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *updateProcessClient) DockerReload(ctx context.Context, in *CmdRequest, opts ...grpc.CallOption) (*CmdReply, error) {
	out := new(CmdReply)
	err := c.cc.Invoke(ctx, "/command.UpdateProcess/DockerReload", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *updateProcessClient) JavaReload(ctx context.Context, in *CmdRequest, opts ...grpc.CallOption) (*CmdReply, error) {
	out := new(CmdReply)
	err := c.cc.Invoke(ctx, "/command.UpdateProcess/JavaReload", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// UpdateProcessServer is the server API for UpdateProcess service.
// All implementations must embed UnimplementedUpdateProcessServer
// for forward compatibility
type UpdateProcessServer interface {
	DockerUpdate(context.Context, *CmdRequest) (*CmdReply, error)
	JavaUpdate(context.Context, *CmdRequest) (*CmdReply, error)
	DockerReload(context.Context, *CmdRequest) (*CmdReply, error)
	JavaReload(context.Context, *CmdRequest) (*CmdReply, error)
	mustEmbedUnimplementedUpdateProcessServer()
}

// UnimplementedUpdateProcessServer must be embedded to have forward compatible implementations.
type UnimplementedUpdateProcessServer struct {
}

func (UnimplementedUpdateProcessServer) DockerUpdate(context.Context, *CmdRequest) (*CmdReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DockerUpdate not implemented")
}
func (UnimplementedUpdateProcessServer) JavaUpdate(context.Context, *CmdRequest) (*CmdReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method JavaUpdate not implemented")
}
func (UnimplementedUpdateProcessServer) DockerReload(context.Context, *CmdRequest) (*CmdReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DockerReload not implemented")
}
func (UnimplementedUpdateProcessServer) JavaReload(context.Context, *CmdRequest) (*CmdReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method JavaReload not implemented")
}
func (UnimplementedUpdateProcessServer) mustEmbedUnimplementedUpdateProcessServer() {}

// UnsafeUpdateProcessServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to UpdateProcessServer will
// result in compilation errors.
type UnsafeUpdateProcessServer interface {
	mustEmbedUnimplementedUpdateProcessServer()
}

func RegisterUpdateProcessServer(s grpc.ServiceRegistrar, srv UpdateProcessServer) {
	s.RegisterService(&UpdateProcess_ServiceDesc, srv)
}

func _UpdateProcess_DockerUpdate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CmdRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UpdateProcessServer).DockerUpdate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/command.UpdateProcess/DockerUpdate",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UpdateProcessServer).DockerUpdate(ctx, req.(*CmdRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UpdateProcess_JavaUpdate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CmdRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UpdateProcessServer).JavaUpdate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/command.UpdateProcess/JavaUpdate",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UpdateProcessServer).JavaUpdate(ctx, req.(*CmdRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UpdateProcess_DockerReload_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CmdRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UpdateProcessServer).DockerReload(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/command.UpdateProcess/DockerReload",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UpdateProcessServer).DockerReload(ctx, req.(*CmdRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UpdateProcess_JavaReload_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CmdRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UpdateProcessServer).JavaReload(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/command.UpdateProcess/JavaReload",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UpdateProcessServer).JavaReload(ctx, req.(*CmdRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// UpdateProcess_ServiceDesc is the grpc.ServiceDesc for UpdateProcess service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var UpdateProcess_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "command.UpdateProcess",
	HandlerType: (*UpdateProcessServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "DockerUpdate",
			Handler:    _UpdateProcess_DockerUpdate_Handler,
		},
		{
			MethodName: "JavaUpdate",
			Handler:    _UpdateProcess_JavaUpdate_Handler,
		},
		{
			MethodName: "DockerReload",
			Handler:    _UpdateProcess_DockerReload_Handler,
		},
		{
			MethodName: "JavaReload",
			Handler:    _UpdateProcess_JavaReload_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "command.proto",
}
